알고리즘(수학)
	1. 2^n 마다 규칙이 있음

	2. f(n)을 2^n ~ 2^(n+1)-1 에서의 1의 개수라고 한다면, f(n) = 2^n + f(i) ( 0 <= i <= n-1 ) 이 성립한다.

	3. 그리고 들어오는 수 A,B에 대해 
		(1~B 까지의 1의 개수) - (1~A-1 까지의 1의 개수) 를 하면 값이 나온다.

	4. 2에서의 규칙에따라 end가 주어지면 0에서 end까지의 1의 개수를 구하는 함수를 선언한다.
		-> 이때 end 미만의 최대 2^n의 n를 구한다.
		-> 2에서의 규칙에 따라 0~n까지의 f(n)을 구한다.
		-> 그럼 나머지 2^(n+1) ~ end 에서의 1의 개수를 구하면 된다.
	
	5. 나머지를 구하는 함수를 선언한다. 2^(n+1)에서 end까지 구하면 된다.
		-> 이때 2^(n+1) ~ end 사이의 값들의 맨앞은 전부 1이고, 개수는 end - 2^(n+1) + 1이다.
		-> 그리고 그 맨앞의 1을 떼고 보면, 0부터 end - 2^(n+1) 까지의 이진수 분포와 동일하다
		-> 따라서 다시 end - 2^(n+1)을 위 4번 함수에 넣으면 된다.  