알고리즘
	1. 상어의 상태(행, 열, 방향, 사이즈, 속도, isAlive, isMoved)를 저장하는 구조체의 배열, 그 배열의 인덱스를 저장하는 맵을 선언.
	  맵에는 각 상어의 인덱스가 저장됨
	2. 낚시꾼을 한칸씩 이동시킴 -> 있는 열에서 상어의 인덱스가 존재하고, 그 인덱스가 가리키는 상어가 살아있으면 잡고, 죽임
	3. 상어 이동 -> 현재 상어에 저장된 행과 열로 맵을 검사 -> 인덱스가 같으면 아직 아무도 안온 것. 떠나야하므로 맵 해당칸을 0으로 바꿈
		   -> 상어 이동. 수학적 관계로 잘 계산. (속도가 최대 10000이므로 여러번 왔다갔다할 수 있는점 고려)
		   -> 이동을 마친 상어가 위치한 맵 칸에 저장된 인덱스가 0이 아니면 누군가 있는것. 
			-> 그 인덱스가 가리키는 상어의 isMoved가 체크되있으면 이동을 마친 상어 -> 사이즈 비교 후 잡아 먹음
			-> 체크 안되있으면 이동을 아직 안한 상어 -> 현재 상어의 인덱스 등록 후 isMoved 체크
	4. 상어 이동이 끝나면 살아잇는 것들은 isMoved 전부 체크
	5. 2-4를 낚시꾼이 끝까지 갈때까지 반복.










주의점
	1. 맵에 상어가 없는 칸에는 -1이 아닌 0을 저장함. -> 원인은 모르겠으나 어디선가 -1이 상어배열에 들어가서 런타임에러를 일으킴
	2. 