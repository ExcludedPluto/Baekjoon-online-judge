알고리즘(백트래킹)
	1. 칸을 하나씩 탐방하면서, 0으로 기록돼있다면 수직, 수평, 3x3사각형을 검사하여 가능한 숫자를 하나씩 뽑아서 넣고 다음 칸 검사
	2. 만약 0으로 기록되지않은 칸으로 갔다면 다음칸으로 넘겨주되, 마지막 칸일 경우 스도쿠가 완성된 것이므로 true를 반환한다.
	3. 마찬가지로, 넣고 다음 칸으로 이동하는데, 마지막칸일 경우 스도쿠가 완성된 것이므로 true를 반환한다.
	4. 최소일때를 반환하는 것이므로 먼저 검사하는 칸을 왼쪽 위로하고, 1부터 검사하여 가능한 걸 넣으면 된다.

구현
	1. 내가 구현한 건 맨처음에 가능한 숫자를 먼저 뽑고, 그 가능한 숫자만 가지고 검사하고 넣고 빼고 했다.
	2. 덕분에 시간이 좀 줄었지만, 체크하는데 매번 체크하여 시간이 좀 걸린 거 같다.
	3. 체크하는 걸 좀 더 간결히 하는 방법은 각 칸마다 3개의 9개의 int원소를 가지는 배열을 가진다.
		ex) int checkMap[WIDTH][WIDTH][3][WIDTH+1];
	 그리고 맨 처음에, 숫자를 넣었을 때마다 각각 수직, 수평, 3x3 사각형의 각 칸에 원래 가지고 있던 숫자 또는 넣은 숫자를 기록한다.
	 수평일 경우 checmMap[row][col][0][value], 수직일 경우 checkMap[row][col][1][value], 사각형일경우 checkMap[row][col][2][value]
	 이렇게하면 넣을 수 있는지 검사할 때 그냥 3개의 배열을 검사하여 있는지만 확인하면 되므로 더 간결해진다.
 	 또, 처음에 가능한 숫자를 먼저 뽑지 않아도 된다.  물론 false가 반환됐을 시, 다시 0으로 바꿔줄 필요도 있다.
	-> 내일 해보자.
	
