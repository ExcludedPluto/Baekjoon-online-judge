알고리즘(구현)
	1. 전역변수 : 
		Fish 구조체 : 맵상의 행, 열, 해당 물고기의 번호, 방향, 살아있음 여부를 저장
		Fish 구조체 배열 : 해당 물고기의 번호대로 저장.(총 16마리이므로 17길이 배열을 선언하여 숫자에 맞춰 1~16에 집어 넣는다.)
		맵 : 물고기 번호를 기록. 빈칸은 -1, 상어는 100	
		상어 : Fish 구조체로 선언. 처음엔 00000을 가짐
		
	2. (0,0)칸 먹고 시작. 물고기 다 옮기는 함수 시행 -> 상어를 옮겨 하나씩 먹임 -> 먹을 때마다 그 먹은 상태에서 다음 함수를 호출. -> 호출한 모든 함수의 반환값중 가장 큰 값을 저장
							-> 먹을 수 있는 물고기가 없으면 상어가 가진 num을 반환.
	3. 물고기 옮기는 함수
		-fish 구조체 배열을 앞에서부터 검사. -> 죽어있으면 그냥 통과
		-방향에 맞추어, 맵밖은 아닌지, 상어가 있지는 않은지 검사하고, 통과하면 두 상어의 위치를 바꿈(그냥 빈칸으로 옮길 수도 있다.) count 0으로 초기화
		-검사에 통과하지 못하면, count 1추가, 방향 변환, i--하여 현재 물고기 다시 검사 -> count ==8이 되면 옮길 수 없는 것. 그냥 통과시킴.
	4. 상어 옮기기
		-옮기기 전 상어상태, 맵, Fish 구조체 배열을 temp에 저장
		-옮기면서 범위밖이면 종료, 빈칸이면 그냥 다음거, 먹으면 반환값 저장 후 max인지 검사. 이후 저장했던 temp로 각 전역변수를 초기화하고 다음칸으로 옮김
		-이때 max==0이면 옮길 수 없었다는 것. 즉, 상어가 집을 간 상태이므로 성어가 가진num을 반환시킨다.
		-max가 있으면 max를 반환시킴
	5. 물고기 먹는 함수
		-상어가 떠난 자리는 BLANK로 남기고, 상어가 간자리는 SHARK로 바꿈. 그리고 먹힌 물고기는 죽었다는 표시를 함.