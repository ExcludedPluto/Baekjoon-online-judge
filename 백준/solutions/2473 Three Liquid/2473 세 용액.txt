알고리즘(이분탐색)
	1. 전부 음수, 전부 양수일 경우, 절댓값이 가장 작은 세 음수, 양수가 정답이므로 바로 출력
	2. 전부 음수, 전부 양수는 아니지만, 절댓값이 가장 작은 세 음수, 양수가 정답일 수 있으므로, zerost 초깃값은 세 음수, 양수 중 작은 값으로 초기화
	3. 나머지는 음수 2개, 양수 1개 일때 / 양수 2개, 음수 1개 일때로 나누어
		2개인 값을 모두 고르고, 1개인 값은 현재의 2개의 값에 가장 가까운 값으로 이분탐색으로 찾아내서 집어넣으면 된다.

	-> 기본적으로 오래걸리는데 난 거기다 set까지 써서 구현했으니 시간이 한참 걸린다.
	-> binary_search() / lower_bound / upper_bound() 를 사용하면 시간 대폭 단축
 

알고리즘 (3SUM, 두 포인터)
	3 SUM 알고리즘
		1. 그냥 두 포인터 응용
		2. 세개중 하나를 고정시키고, 나머지 두개를 움직여 구하면 된다.
		3. 이때는 양수 음수 나눌 필요는 없이, 그냥 맨 왼쪽 거만 0~n-2에서 고정시키고 두개를 움직이면 됨.
		4. 두 포인터 구조는
			양수로 0에 가까워졌으면 second 증가
			음수로 0에 가까워졌으면 third 증가
			0이면 스탑후 반환