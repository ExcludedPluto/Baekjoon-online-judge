알고리즘
	1. 각 버스노선의 출발점, 도착점, 번호를 기록한 구조체를 만들고, 출발점을 기준으로 정렬. 출발점이 같으면 도착점이 작은 것이 앞에 위치하도록함.
	2. 버스노선인덱스를 저장하는 배열을 만들어, 버스노선을 하나씩 검사함.
		-초기 : 첫번째 버스노선을 넣음
	3. 검사내용
		-출발점이 이전 버스노선과 같은가
			-이전 버스노선이 0을 지나치고, 현재 버스노선도 0을 지나치는가	(정렬로 인해 자동으로 현재버스노선이 이전버스노선을 감싸는 형태가 됨.)
				-현재버스 노선을 넣었을 때 지워지는 노선을 전부 지움
				-이전버스노선도 지워졌으므로, 이전 버스노선인덱스 위치에 현재 버스노선의 인덱스를 넣음
			-이전 버스노선이 0을 지나치지만, 현재 버스노선은 0을 지나치지 앟음
				-현재버스노선 스킵
			-이전 버스노선이 0을 지나치지 않음
				-이전 버스노선을 지우고, 현재 버스노선을 저장
		-출발점이 이전 버스노선과 다른가
			-현재 버스노선이 0을 지나치는가
				-이전 버스노선이 0을 지나치고, 현재 버스노선을 감싸는가
					-스킵
				-그 외
					-현재버스 노선을 넣었을 때 지워지는 노선을 전부 지움
					-이전 버스노선이 지워졌으면 이전 위치에 넣고, 아니면 이어서 넣자
			-현재 버스노선이 0을 지나치치 않는가
				-이전 버스노선이 0을 지나치지 않고, 현재 버스노선을 감싸지 않을 때
					-현재 버스노선을 이어서 넣음
				-그 외 스킵
	4. 검사 끝나고, 버스노선 인덱스들로부터 남은 버스노선의 번호들을 추출하고, 번호들을 정렬하여 출력.
			

다른 풀이법
	1. 0번 정류장을 안지나는 그룹을 A, 지나는 그룹을 B라고 하자.	
	2. A그룹 먼저 내 방식대로 정렬 후 겹치는 거 있는지 확인 후 집어넣어 기록
	3. B그룹을 적절하게 정렬 후 검사 -> A그룹을 포함하는지, 같은 B그룹 내 다른 노선을 포함하는지 확인하여 기록.
